---
version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.3.0
  aws-eks: circleci/aws-eks@0.2.3
  aws-s3: circleci/aws-s3@1.0.11

variables:
  - &workspace /home/circleci/project

aliases:
  # Limit the branches to run this on
  - &branch_filters
    branches:
      only:  # only branches matching the below regex filters will run
        - /circleci-.*/

  - &add-private-npm-registry
      name: Add NPM Token
      command: |
        echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > .npmrc

  # Shallow Clone - this allows us to cut the 2 minute repo clone of "procurifydevelopment" down to about 10 seconds
  - &checkout-shallow
    name: Checkout (Shallow)
    command: |
      #!/bin/sh
      set -e

      # Workaround old docker images with incorrect $HOME
      # check https://github.com/docker/docker/issues/2968 for details
      if [ "${HOME}" = "/" ]
      then
        export HOME=$(getent passwd $(id -un) | cut -d: -f6)
      fi

      mkdir -p ~/.ssh

      echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
      bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==' >> ~/.ssh/known_hosts

      (umask 077; touch ~/.ssh/id_rsa)
      chmod 0600 ~/.ssh/id_rsa
      (cat \<<EOF > ~/.ssh/id_rsa
      $CHECKOUT_KEY
      EOF
      )

      # use git+ssh instead of https
      git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true

      if [ -e /home/circleci/project/.git ]
      then
          cd /home/circleci/project
          git remote set-url origin "$CIRCLE_REPOSITORY_URL" || true
      else
          mkdir -p /home/circleci/project
          cd /home/circleci/project
          git clone --depth=1 "$CIRCLE_REPOSITORY_URL" .
      fi

      if [ -n "$CIRCLE_TAG" ]
      then
        git fetch --depth=10 --force origin "refs/tags/${CIRCLE_TAG}"
      elif [[ "$CIRCLE_BRANCH" =~ ^pull\/* ]]
      then
      # For PR from Fork
        git fetch --depth=10 --force origin "$CIRCLE_BRANCH/head:remotes/origin/$CIRCLE_BRANCH"
      else
        git fetch --depth=10 --force origin "$CIRCLE_BRANCH:remotes/origin/$CIRCLE_BRANCH"
      fi

      if [ -n "$CIRCLE_TAG" ]
      then
          git reset --hard "$CIRCLE_SHA1"
          git checkout -q "$CIRCLE_TAG"
      elif [ -n "$CIRCLE_BRANCH" ]
      then
          git reset --hard "$CIRCLE_SHA1"
          git checkout -q -B "$CIRCLE_BRANCH"
      fi

      git reset --hard "$CIRCLE_SHA1"
      pwd


jobs:
  checkout_code:
    docker:
      # - image: cimg/base:stable
      - image: circleci/python:3.7
    steps:
      # - checkout
      - run: *checkout-shallow
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - .

  checkout_react:
    docker:
      - image: circleci/node:12
    working_directory: *workspace
    steps:
      - add_ssh_keys:
          fingerprints:
            - "aa:c2:28:13:1e:21:b7:51:92:f4:71:14:f4:27:5a:3a"
      - run:
          name: Checkout React Repo
          command: |
            mkdir -p ~/.ssh
            echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts

            mkdir -p static/modules/react
            echo 'Cloning git@github.com:procurify/procurify-react.git'
            git clone --single-branch --branch deploy git@github.com:procurify/procurify-react.git static/modules/react
      - run:
          name: Pull React Deploy
          command: |
            echo 'Pulling React Deploy'
            cd static/modules/react && \
            git fetch && \
            git checkout deploy && \
            git pull --rebase
      - persist_to_workspace:
          root: *workspace
          paths:
            - static/modules/react/*

  test_backend:
    docker:
      - image: circleci/python:3.7
        environment:
          DJANGO_SETTINGS_MODULE: procurify.settings.docker_test

      - image: circleci/mysql:5.6
        environment:
          MYSQL_ROOT_PASSWORD: procurify
          MYSQL_DATABASE: procurify
          MYSQL_USER: procurify
          MYSQL_PASSWORD: procurify

      # - image: docker:17.05.0-ce-git
      - image: mailhog/mailhog
      - image: memcached:latest
      - image: circleci/redis:latest
      - image: rabbitmq:3-management
        environment:
          RABBITMQ_DEFAULT_HOST: rabbitmq
          RABBITMQ_DEFAULT_PASS: rabbitmq
          RABBITMQ_DEFAULT_USER: rabbitmq
          RABBITMQ_DEFAULT_VHOST: procurify
    parallelism: 4
    environment:
      MEMCACHED_HOST: 127.0.0.1
      RABBITMQ_DEFAULT_HOST: 127.0.0.1
      REDIS_HOST: 127.0.0.1
      EMAIL_HOST: 127.0.0.1
      WEBAPP_DATABASE_HOST: 127.0.0.1
      WEBAPP_DATABASE_PASSWORD: procurify
      WEBAPP_DATABASE_READONLY_HOST: 127.0.0.1
      WEBAPP_DATABASE_USER: procurify
      # Needed for test_account_services.py
      AC_RECOMMENDER_URL: https://ac-recommender.procurify-staging.xyz/test_dsnp
    working_directory: *workspace
    steps:
      - attach_workspace:
          at: *workspace
      - run:
          name: Setup Cache Folder Permissions
          command: |
            sudo chown -R circleci:circleci /usr/local/bin
            sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages
      - restore_cache:
          keys:
            - pip-cache-v2-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/development.txt" }}
            # fallback to using the latest cache if no exact match is found
            - pip-cache-v2-{{ checksum "requirements/base.txt" }}
            - pip-cache-v2-
      - checkout
      - run:
          name: Install Dependencies
          command: |
            # If you need to force the cache to be deleted for your build, add [no-cache] to your commit message
            # Remove cached venv if required
            if [[ $(git show -s --format=%B $CIRCLE_SHA1) == *"[no-cache]"* ]]; then
              rm -rf venv
            fi
            # Install dependencies
            python3 -m venv venv
            . venv/bin/activate
            # Run pip install with --no-cache-dir
            if [[ $(git show -s --format=%B $CIRCLE_SHA1) == *"[no-cache]"* ]]; then
              pip install --no-cache-dir -r requirements/development.txt
            else
              pip install -r requirements/development.txt
            fi
            # Django needs mysql
            sudo apt-get update && sudo apt-get install default-mysql-client
      # Use dockerize to wait for mysql database to be ready
      - run:
          name: Install Dockerize
          command: wget --tries=10 --waitretry=5 https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: Backend Tests
          command: |
            . venv/bin/activate
            TESTFILES=$(circleci tests glob "tests/**/test_*.py" | circleci tests split --split-by=timings)
            echo $TESTFILES
            pytest -x --junit-xml test-reports/junit.xml --disable-warnings $TESTFILES
      - save_cache:
          paths:
            - "venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.7/site-packages"
          key: pip-cache-v2-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/development.txt" }}
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports

  test_frontend:
    docker:
      - image: circleci/node:12-browsers
    working_directory: *workspace
    steps:
      - attach_workspace:
          at: *workspace
      - restore_cache:
          keys:
            - node-cache-v2-{{ checksum "package-lock.json" }}
            # fallback to using the latest cache if no exact match is found
            - node-cache-v2-
      - run: *add-private-npm-registry
      - run:
          name: NPM Install
          command: |
            npm ci --prefer-offline --no-audit
            npm rebuild node-sass
      - run:
          name: Frontend Tests
          command: |
            export CHROME_BIN=/usr/bin/google-chrome
            npm run test-compile
      - save_cache:
          paths:
            - node_modules
          key: node-cache-v2-{{ checksum "package-lock.json" }}

  build_frontend:
    docker:
      - image: circleci/node:12
    working_directory: *workspace
    parameters:
      launchdarkly-client-id:
        type: string
        default: ''
        description: |
          The public client ID for LaunchDarkly.
    environment:
      LAUNCHDARKLY_CLIENT_ID: << parameters.launchdarkly-client-id >>
    steps:
      - attach_workspace:
          at: *workspace
      - restore_cache:
          keys:
            - node-cache-v2-{{ checksum "package-lock.json" }}
            # fallback to using the latest cache if no exact match is found
            - node-cache-v2-
      - run: *add-private-npm-registry
      - run:
          name: NPM Install
          command: |
            npm ci --prefer-offline --no-audit
      - run:
          name: Webpack Build
          command: |
            npm run webpack
      - persist_to_workspace:
          root: *workspace
          paths:
            - .
      - save_cache:
          paths:
            - node_modules
          key: node-cache-v2-{{ checksum "package-lock.json" }}

  # For commits to a branch, build an image, create a k8s namespace, and test that branch
  create_namespace:
    executor: aws-eks/python3
    parameters:
      namespace:
        type: string
        default: ''
        description: |
          The kubernetes namespace that should be used.
      tag:
        type: string
        default: ''
        description: |
          The tag that should be deployed.
      region:
        type: string
        default: ''
        description: |
          The region to use for AWS operations.
      cluster-name:
        description: |
          The name of the EKS cluster.
        type: string
      cluster-authentication-role-arn:
        default: ''
        description: |
          To assume a role for cluster authentication, specify an IAM role ARN with
          this option. For example, if you created a cluster while assuming an IAM
          role, then you must also assume that role to connect to the cluster the
          first time.
        type: string
    steps:
      - run: *checkout-shallow
      - run:
          name: Install Kustomize
          command: |
            KUSTOMIZE_VERSION=3.2.0
            curl -L -o ./kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v${KUSTOMIZE_VERSION}/kustomize_${KUSTOMIZE_VERSION}_linux_amd64
            chmod +x ./kustomize
            sudo mv ./kustomize /usr/local/bin/kustomize
            kustomize version
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          cluster-authentication-role-arn: << parameters.cluster-authentication-role-arn >>
          aws-region: << parameters.region >>
          install-kubectl: true
      - run:
          name: deploy-to-namespace
          command: cd kubernetes && ./namespace-deployer.sh << parameters.namespace >> << parameters.tag >> apply

  delete_namespace:
    executor: aws-eks/python3
    parameters:
      namespace:
        type: string
        default: ''
        description: |
          The kubernetes namespace that should be used.
      tag:
        type: string
        default: ''
        description: |
          The tag that should be deployed.
      region:
        type: string
        default: ''
        description: |
          The region to use for AWS operations.
      cluster-name:
        description: |
          The name of the EKS cluster.
        type: string
      cluster-authentication-role-arn:
        default: ''
        description: |
          To assume a role for cluster authentication, specify an IAM role ARN with
          this option. For example, if you created a cluster while assuming an IAM
          role, then you must also assume that role to connect to the cluster the
          first time.
        type: string
    steps:
      - run: *checkout-shallow
      - run:
          name: Install Kustomize
          command: |
            KUSTOMIZE_VERSION=3.2.0
            curl -L -o ./kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v${KUSTOMIZE_VERSION}/kustomize_${KUSTOMIZE_VERSION}_linux_amd64
            chmod +x ./kustomize
            sudo mv ./kustomize /usr/local/bin/kustomize
            kustomize version
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          cluster-authentication-role-arn: << parameters.cluster-authentication-role-arn >>
          aws-region: << parameters.region >>
          install-kubectl: true
      - run:
          name: delete-branch-namespace
          command: cd kubernetes && ./namespace-deployer.sh << parameters.namespace >> << parameters.tag >> delete

  deploy_staging:
    docker:
      - image: circleci/buildpack-deps:18.04-curl

    steps:
      - run:
          command: |
            curl -X POST \
            -d "{\"branch\":\"$CIRCLE_BRANCH\", \"repo\": \"procurify\"}" \
            -H 'Content-Type: application/json' \
            -H "Authorization: Basic $STAGING_BUILD_AUTH" \
            https://buildserver.procurify-staging.com/build

  test_smoke:
    docker:
      - image: 584905272805.dkr.ecr.us-west-2.amazonaws.com/procurify-test-automation
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    steps:
      - run:
          name: Run tests
          command: |
              cd /app
              HEADLESS=TRUE DOCKER=TRUE BASE_URL="http://${CIRCLE_BRANCH}.procurify-staging.com" npm run test -- --grep 'Navigation Test'
      - store_test_results:
          path: /app/reports
      - store_artifacts:
          path: /app/reports

workflows:
    version: 2
    workflow:
      jobs:
        - checkout_code
        - checkout_react
        - test_frontend:
            requires:
              - checkout_code
        - test_backend:
            requires:
              - checkout_code
        - build_frontend:
            launchdarkly-client-id: 5cb279edc268010823230ccd
            requires:
              - checkout_code
              - checkout_react
            filters:
              branches:
                only:  # only branches matching the below regex filters will run
                  - /^development$/
                  - /^deploy-.*/
        - aws-ecr/build-and-push-image:
            account-url: AWS_ACCOUNT_URL
            aws-access-key-id: AWS_ACCESS_KEY_ID
            aws-secret-access-key: AWS_SECRET_ACCESS_KEY
            region: AWS_DEFAULT_REGION
            repo: procurify-backend
            tag: "${CIRCLE_SHA1}"
            checkout: false
            attach-workspace: true
            workspace-root: *workspace
            requires:
              - build_frontend
            filters:
              branches:
                only:  # only branches matching the below regex filters will run
                  - /^development$/
                  - /^deploy-.*/
        - deploy_staging:
            requires:
              - test_frontend
              - test_backend
            filters:
              branches:
                only:  # only branches matching the below regex filters will run
                  - /^development$/
                  - /^deploy-.*/
        - create_namespace:
            cluster-name: "staging"
            cluster-authentication-role-arn: "arn:aws:iam::584905272805:role/kubernetes-admin-staging"
            region: "${AWS_DEFAULT_REGION}"
            namespace: "${CIRCLE_BRANCH}"
            tag: "${CIRCLE_SHA1}"
            requires:
              - aws-ecr/build-and-push-image
            filters:
              branches:
                only:  # only branches matching the below regex filters will run
                  - /^development$/
                  - /^deploy-.*/
        - test_smoke:
            requires:
              - create_namespace
            filters:
              branches:
                only:  # only branches matching the below regex filters will run
                  - /^deploy-.*/
        - delete_namespace:
            cluster-name: "staging"
            cluster-authentication-role-arn: "arn:aws:iam::584905272805:role/kubernetes-admin-staging"
            region: "${AWS_DEFAULT_REGION}"
            namespace: "${CIRCLE_BRANCH}"
            tag: "${CIRCLE_SHA1}"
            requires:
              - test_smoke
            filters:
              branches:
                only:  # only branches matching the below regex filters will run
                  - /^development$/
                  - /^deploy-.*/
